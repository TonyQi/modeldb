<template>
	<div class="app-container calendar-list-container">
		<div class="filter-container">
			<el-form ref="queryForm" :model="queryForm" label-width="80px">
				<el-row>
				  <el-col :span="4" >	
						 <el-form-item label="文件名称">
						    <el-input v-model="queryForm.filename"></el-input>
						  </el-form-item>
					</el-col>
					<el-col :span="4">
						  <el-form-item label="数据类型">
						    <el-select v-model="queryForm.datatype" placeholder="请选择">
							    <el-option
							      v-for="item in typeoptions"
							      :key="item.value"
							      :label="item.label"
							      :value="item.value">
							    </el-option>
							  </el-select>
							</el-form-item>
						</el-col>
						<el-col :span="4" >	
						  <el-form-item label="密级">
						    <el-select v-model="queryForm.secret" placeholder="请选择" size="medium">
							    <el-option
							      v-for="item in secretoptions"
							      :key="item.value"
							      :label="item.label"
							      :value="item.value">
							    </el-option>
							  </el-select>
							</el-form-item>
						</el-col>
						<el-col :span="4">
							  <el-form-item label="目标名称">
							    <el-select
								    v-model="queryForm.aimsId"
								    filterable
								    remote
								    reserve-keyword
								    placeholder="关键词"
								    :remote-method="remoteMethod"
								    :loading="loading">
								    <el-option
								      v-for="item in aims"
								      :key="item.id"
								      :label="item.aimsName"
								      :value="item.id">
								    </el-option>
								  </el-select>
							  </el-form-item>
						</el-col>

						<el-col :span="4">
						  <el-form-item label="起止时间">
						     <el-date-picker
						      v-model="queryForm.date"
						      type="daterange"
						      range-separator="至"
						      start-placeholder="开始日期"
						      end-placeholder="结束日期">
						    </el-date-picker>
						  </el-form-item>
						</el-col>

						<el-col :offset="10"  :span="12">
							  <el-form-item>
							    <el-button type="primary" @click="onSearch">搜索</el-button>
							    <el-button  @click="resetForm">重置</el-button>
							  </el-form-item>
						</el-col>	
				  </el-col>
				</el-row>
			</el-form>
		</div>
		<div class="filter-container">
			<el-button class="filter-item"  style="margin-left: 10px;" @click="handleCreate" type="primary" icon="edit">添加</el-button>
		</div>
		<el-table :key='tableKey' :data="list" v-loading.body="listLoading" border fit highlight-current-row style="width: 100%">
	    <el-table-column  align="center" label="文件名">
	    	<template scope="scope">
	        <a v-for="item in scope.row.items"   @click="download(item.id,item.fileName)">
	        	<el-tag
          		type="success"
         			 disable-transitions>
         			 {{item.fileName}}
         		</el-tag>
         		<br/>
         	</a>
	      </template>
	    </el-table-column>
	    <el-table-column align="center" label="密级">
	    	<template scope="scope">
	        <span>{{scope.row.secretStr}}</span>
	      </template>
	     </el-table-column>
	    <el-table-column  align="center" label="数据类型">
	    	<template scope="scope">
          <span>{{scope.row.dataTypeStr}}</span>
        </template>
	     	</el-table-column>
	    <el-table-column  align="center" label="目标名称">
	    	<template scope="scope">
          <span>{{scope.row.aimsName}}</span>
        </template>
	    </el-table-column>
	    <el-table-column  align="center" label="录入人">
	    	<template scope="scope">
          <span>{{scope.row.uploadUser}}</span>
        </template>
	    </el-table-column>
	    <el-table-column align="center" label="操作" width="250"> <template scope="scope">
	        <el-button size="small" v-show="scope.row.dataType!='benchmark'" type="success" @click="handleShowDetail(scope.row)">明细
	        </el-button>
	        <a v-if="scope.row.dataType==='onedimen'">
	        	<el-button  size="small" type="success"  @click="handleShowVisio(scope.row)">图形
	        	</el-button>
	        </a>
	        <a v-else-if="scope.row.dataType==='twodimen'" @click="handleShowVisio2d(scope.row)">
	        	
	        	<el-button  size="small" type="success">图形
	        	</el-button>
	        </a>
	        <a v-else-if="scope.row.dataType==='benchmark'&&scope.row.fileName" >
	        	
	        	<el-button  size="small" type="success" @click="handleShowVisio3d(scope.row)">3D图形
	        	</el-button>
	        </a>
	        <el-button size="small" type="danger" @click="handleDelete(scope.row)">删除
	        </el-button>
	      </template>
	    </el-table-column>
	  </el-table>
	  <div v-show="!listLoading" class="pagination-container">
	    <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page.sync="listQuery.page" :page-sizes="[10,20,30, 50]" :page-size="listQuery.limit" layout="total, sizes, prev, pager, next" :total="total"> </el-pagination>
	  </div>
	  <el-dialog title="添加" :visible.sync="dialogFormVisible">
	    <el-form :model="datafrom" :rules="rules" ref="datafrom" label-width="100px">
	      <el-form-item label="类型" prop="datatype">
	        <el-select v-model="datafrom.datatype" placeholder="请选择" @change="upDataTypeChange">
				    <el-option
				      v-for="item in typeoptions"
				      :key="item.value"
				      :label="item.label"
				      :value="item.value"
				      :disabled="item.disabled">
				    </el-option>
				  </el-select>
	      </el-form-item>
	      <el-form-item label="密级" prop="secret">
			    <el-select v-model="datafrom.secret" placeholder="请选择" size="medium">
				    <el-option
				      v-for="item in secretoptions"
				      :key="item.value"
				      :label="item.label"
				      :value="item.value">
				    </el-option>
				  </el-select>
	      </el-form-item>
	      <el-form-item label="目标名称" prop="aims">
			    <el-select
				    v-model="datafrom.aimsId"
				    filterable
				    remote
				    reserve-keyword
				    placeholder="请输入关键词"
				    :remote-method="remoteMethod"
				    :loading="loading">
				    <el-option
				      v-for="item in aims"
				      :key="item.id"
				      :label="item.aimsName"
				      :value="item.id">
				    </el-option>
				  </el-select>
	      </el-form-item>
	      <el-form-item  label="文件" placeholder="请上传文件" prop="file">
	        <el-upload
					  class="upload-demo"
					  ref="upload"
					  action=""
					  :multiple="false"
					  :accept="fileType"
					  :http-request="uploadFile"
					  :on-remove="handleRemove"
					  :before-upload="beforeupload"
					  :file-list="fileList"
					  >
					  <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
					</el-upload>
	      </el-form-item>
	      <el-form-item label="描述">
	        <el-input type="textarea" :autosize="{ minRows: 3, maxRows: 5}" placeholder="请输入内容" v-model="datafrom.description"> </el-input>
	      </el-form-item>
	    </el-form>
	    <div slot="footer" class="dialog-footer">
	      <el-button @click="cancel()">取 消</el-button>
	      <el-button  type="primary" @click="create()">确 定</el-button>
	    </div>
	  </el-dialog>
	  <el-dialog title="明细展示" :visible.sync="dialogDetailVisible" >
	  	<detail  ref="details"></detail>
	  </el-dialog>
	  <el-dialog title="图像展示" :visible.sync="dialogVisioVisible" top="0vh" width="80%" fullscreen=true>
	  	<line-chart ref="child2"></line-chart>
	  </el-dialog>
	  <el-dialog title="图像展示" :visible.sync="dialogThVisioVisible" fullscreen=true>
	  	<three-chart ref="child3"></three-chart>
	  </el-dialog>
	</div>
</template>

<script>
import {
  upload,
  queryList,
  delObj,
  add,
  downFile,
  getAimsByName
} from 'api/admin/file/index';
import { mapGetters } from 'vuex';
import detail from './detail';
import lineChart from './lineChart';
import threeChart from './threeChart';
import {
  getToken
} from 'utils/auth';
  export default {
  	components: { detail,lineChart,threeChart },
    data() {
      return {
      	queryForm:{
      		filename:undefined,
      		datatype:undefined,
      		secret:undefined,
      		inputname:undefined,
      		date:undefined,
      		aimsId:undefined,
      	},
      	param:undefined,
      	fileNames:[],
      	typeoptions:[
	      	{
	      		value: 'onedimen',
	          label: '一维辐相'	
	      	},
	      	{
	      		value: 'twodimen',
	          label: '二维成像图像'	
	      	},
	      	{
	      		value: 'benchmark',
	          label: 'BenchMark模型'	
	      	}
      	],
      	secretoptions:[
      		{
	      		value: '1',
	          label: '公开'	
	      	},
	      	{
	      		value: '2',
	          label: '秘密'	
	      	},
	      	{
	      		value: '3',
	          label: '绝密'	
	      	}
      	],
      	list:[],
      	listQuery: {
	        page: 1,
	        limit: 20,
	        filename: undefined,
	        datatype:	undefined,
	        secret: undefined,
	        inputname: undefined,
	        startdate: undefined,
	        enddate: undefined
	      },
      	total: null,
      	tableKey: 0,
      	listLoading: false,
      	dialogFormVisible: false,
      	dialogDetailVisible: false,
      	dialogVisioVisible:false,
      	dialogThVisioVisible:false,
      	loading:false,
      	fileList:[],
      	aims:[],
      	fileInfoId:"",
      	rules:{
      		datatype:[
      			{
	            required: true,
	            message: '请选择类型',
	            trigger: 'blur'
          	}
      		],
      		secret:[
	      		{
	      			required:true,
	            message:'请选择密级'
	      		}
      		]
      	},
      	datafrom:{
      		datatype:"",
      		secret:"",
      		aimsId:"",
      		description:""
      	},
      	fileType:'.txt'
      };
    },
    methods: {
	      handlePreview(file) {
	        console.log(file);
	      },
	      onSearch(){
	      	this.getList();
	      },
	      handleSizeChange(val) {
		      this.listQuery.limit = val;
		      this.getList();
		    },
		    handleCurrentChange(val) {
		      this.listQuery.page = val;
		      this.getList();
		    },
		    handleCreate(){
		    	this.dialogFormVisible=true;
		    },
		    getList(){
		    	this.listLoading=true;
		    	this.listQuery.filename=this.queryForm.filename;
		    	this.listQuery.datatype=this.queryForm.datatype;
		    	this.listQuery.secret=this.queryForm.secret;
		    	this.listQuery.aimsId=this.queryForm.aimsId;
		    	if(this.queryForm.date&&this.queryForm.date.length==2){
		    		this.listQuery.startdate=this.queryForm.date[0].format("yyyyMMdd");
		    		this.listQuery.enddate=this.queryForm.date[1].format("yyyyMMdd");
		    	}else{
		    		this.listQuery.startdate=undefined;
		    		this.listQuery.enddate=undefined;
		    	}
		    	console.log(this.listQuery);
		    	queryList(this.listQuery).then(response => {
	          const list= response.data.rows;
	          const secrets=this.secretoptions;
	          const types=this.typeoptions;
	          list.forEach(function(item){
	          	item['secretStr']=getDictText(secrets,item.secret);
	          	item['dataTypeStr']=getDictText(types,item.dataType);
				  	});
				  	this.list=list;
	          this.total = response.data.total;
	          this.listLoading = false;
	        });
		    },
		    uploadFile (req) {
		    	/**
		      const config = {
		        headers: {'Content-Type': 'multipart/form-data'}
		      }
	        const formdata = new FormData();
	        formdata.append('file', req.file);
	        upload(formdata).then(response => {
	        	//console.log(response);
	        	req.file.id=response.id;
	        	this.fileNames.push(response.id);
	        });
	        */
		    },
		    //阻止upload的自己上传，进行再操作
        beforeupload(file) {
            console.log(file);
            this.param.push(file);
            return true;
        },
		    create(){
		    	this.$refs['datafrom'].validate((valid) => {
	          if (valid) {
	          	var form=new FormData();
	          	form.append('datatype',this.datafrom.datatype);
	          	form.append('secret',this.datafrom.secret);
	          	form.append('aimsId',this.datafrom.aimsId);
	          	form.append('description',this.datafrom.description);
	          	for(let i=0;i<this.param.length;i++){
	          		form.append('file',this.param[i]);
	          	}
	          	const config = {
				        headers: {'Content-Type': 'multipart/form-data'}
				      }
			        upload(form).then(response => {
				        	this.param=[];
				        	this.datafrom={
					      		datatype:"",
					      		secret:"",
					      		description:""
					      	};
					      	this.$refs.upload.clearFiles();
				        	this.dialogFormVisible=false;
				        	this.getList();
			        });
			        
	          }
	        });
		    	
		    },
		    cancel(){
		    	this.dialogFormVisible=false;
		    	this.$refs['datafrom'].resetFields();
		    	this.$refs.upload.clearFiles();
		    },
		    handleRemove(file, fileList) {
	        let files=this.param;
	        let index=-1;
	        for(let i=0;i<files.length;i++){
	        	let uid=files[i].uid;
	        	if(file.uid===uid){
	        		index=i;
	        		break;	
	        	}	        	
	        }

	        if(index!=-1){
	        	files.splice(index,1);
	        	this.param=files;	
	        
	        }

	        return true;
	      },
		    resetForm() {
		    	this.queryForm={
			    		filename:'',
	      			datatype:'',
	      			secret:'',
	      			inputname:'',
	      			date:[]
      			};
	      },
	      
	      handleDelete(row) {
		      this.$confirm('此操作将永久删除, 是否继续?', '提示', {
		        confirmButtonText: '确定',
		        cancelButtonText: '取消',
		        type: 'warning'
		      })
		        .then(() => {
		          delObj(row.id)
		            .then(() => {
		              this.$notify({
		                title: '成功',
		                message: '删除成功',
		                type: 'success',
		                duration: 2000
		              });
		              const index = this.list.indexOf(row);
		              this.list.splice(index, 1);
		            });
		        });
		    },
		    handleShowDetail(row){
		    	this.dialogDetailVisible=true;
		    	this.fileInfoId=row.id;
		    	this.$nextTick(function () {
		    			this.$refs.details.getDetailInfo(this.fileInfoId);
		    		}
		    	);
		    	
		    	
		    },
		    handleShowVisio(row){
		    	this.dialogVisioVisible=true;
		    	this.fileInfoId=row.id;
		    	this.$nextTick(function () {	
		    			this.$refs.child2.showLineDatas(this.fileInfoId);
		    		}
		    	);
		    	
		    },
		    fileNumOver(files, fileList){
		    	this.$notify({
                message: '文件个数超过限制',
                type: 'error',
                duration: 2000
              });
		    },
		    fileChange(file, fileList){
		    	console.log(fileList);
		    	this.fileList=fileList;
		    },
		    download(id,fileName){
		    	const token=getToken();
		    	window.open('/api/admin/file/downloadFile?id='+id+"&token="+token);
		    	/**
		    	let data={};
		    	data.id=id;
		    	 const config = {
		       responseType: 'arraybuffer'
		      };
		    	downFile(data).then(response => {
        						let fileDownload = require('downloadjs');
        						fileDownload(response.data, fileName);
		            });
							            
		    	**/
					
		    },
		    upDataTypeChange(item){
		    	if(item==="benchmark"){
		    		this.fileType=".igs,.obj";
		    	}else{
		    		this.fileType=".txt";
		    	}
		    },
		    handleShowVisio2d(item){
		    	const id=item.id;
		    	let location=window.location.host;
		    	location="http://"+location+"/api/admin/filedown/twoDData/"+id;
					var base = new Base64();
					location = base.encode(location);
					console.log(location); 
					let doma=document.createElement('a');
					doma.setAttribute('href','DIM://'+location);
					doma.click();
		    },
		    handleShowVisio3d(item){
		    	this.fileInfoId=item.id;
		    	this.dialogThVisioVisible=true;
		    	console.log(this.fileInfoId); 
		    	this.$nextTick(function () {	
		    			this.$refs.child3.initChart(this.fileInfoId);
		    		}
		    	);
		    },
		    remoteMethod(aimName){
		    	if(aimName!=""){
		    		this.loading = true;
		    	  this.getAimsName(aimName);
		    	}else{
		    		this.getAimsName("");
		    	}
		    	
		    	 
		    },
		    getAimsName(aimName){
		    	var para={"name":aimName};
		    	getAimsByName(para).then(response => {
        			 this.loading = false;
        			 this.aims=response;
		        });
		    }
    },
    created() {
    	this.param=[];
	    this.getList();
	  }
  }
  
  function getDictText(array,valueText){
  	const map={};
  	array.forEach(function(item){
  		map[item.value]=item.label;
  	});
  	return map[valueText];
  	
  }
  Date.prototype.format = function(fmt) { 
     var o = { 
        "M+" : this.getMonth()+1,                 //月份 
        "d+" : this.getDate(),                    //日 
        "h+" : this.getHours(),                   //小时 
        "m+" : this.getMinutes(),                 //分 
        "s+" : this.getSeconds(),                 //秒 
        "q+" : Math.floor((this.getMonth()+3)/3), //季度 
        "S"  : this.getMilliseconds()             //毫秒 
    }; 
    if(/(y+)/.test(fmt)) {
            fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length)); 
    }
     for(var k in o) {
        if(new RegExp("("+ k +")").test(fmt)){
             fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));
         }
     }
    return fmt; 
}

 
function Base64() {
 
	// private property
	const _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 
	// public method for encoding
	this.encode = function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;
		input = utf8_encode(input);
		while (i < input.length) {
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
			output = output +
			_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
			_keyStr.charAt(enc3) + _keyStr.charAt(enc4);
		}
		return output;
	}
 
	// public method for decoding
	this.decode = function (input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;
		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
		while (i < input.length) {
			enc1 = _keyStr.indexOf(input.charAt(i++));
			enc2 = _keyStr.indexOf(input.charAt(i++));
			enc3 = _keyStr.indexOf(input.charAt(i++));
			enc4 = _keyStr.indexOf(input.charAt(i++));
			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;
			output = output + String.fromCharCode(chr1);
			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}
		}
		output = utf8_decode(output);
		return output;
	}
 
	// private method for UTF-8 encoding
}
  function utf8_encode(string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";
		for (var n = 0; n < string.length; n++) {
			var c = string.charCodeAt(n);
			if (c < 128) {
				utftext += String.fromCharCode(c);
			} else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			} else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}
 
		}
		return utftext;
	}
 
	// private method for UTF-8 decoding
	 function utf8_decode(utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;
		while ( i < utftext.length ) {
			c = utftext.charCodeAt(i);
			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			} else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			} else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}
		}
		return string;
	}

</script>
<style>
  .el-row {
    margin-bottom: 20px;
    &:last-child {
      margin-bottom: 0;
    }
  }
  .el-col {
    border-radius: 4px;
  }
  .bg-purple-dark {
    background: #99a9bf;
    text-align:center;
    vertical-align: middle;
  }
  .bg-purple {
    background: #d3dce6;
    text-align:center;
  	vertical-align: middle;
  }
  .bg-purple-light {
    background: #e5e9f2;
    text-align:center;
    vertical-align: middle;
  }
  .grid-content {
    border-radius: 4px;
    min-height: 36px;
  }
  .row-bg {
    padding: 10px 0;
    background-color: #f9fafc;
  }
  .el-dialog--small {
	    width: 80%;
	}
</style>